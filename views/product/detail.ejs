<html>
    <head>
        <%- include("../header.ejs") %>
        <script src="/js/nicEdit.js"></script>
        <script src="/js/product/ModelProduct.js"></script>
        <script src="/js/product/ModelFile.js"></script>
        <script type="text/javascript">
            bkLib.onDomLoaded(function() {
                new nicEditor({fullPanel : true}).panelInstance('area2');

            });
        </script>        
    </head>
    <body class="container-fluid">
        <div>
            <%- include("../menu.ejs"); %>
        </div>
        
        <div id="app">            
            <table class="table table-bordered">
                <tr>
                    <td>Tên sản phẩm: </td>
                    <td><input :value="product_model.getName()" class="form-control"></td>
                </tr>
                <tr>
                    <td>Mô tả: </td>
                    <td><textarea class="form-control" id="area2">{{ description }}</textarea></td>
                </tr>
                <tr>
                    <td>Link ảnh: </td>
                    <td><input class="form-control" :value="product_model.getImages()"><button class="btn btn-warning" @click="test_image_source = image_source">TEST</button></td>
                </tr>
                <tr>
                    <td>Phân loại: </td>
                    <td><input type="radio" value="TEMP" v-model="b">   <input type="radio" value="BASIC" v-model="b"></td>
                </tr>
            </table>
            <img id="imageid" :src="test_image_source">
        </div>
        
        <script>
            function getBase64Image(img) {
                var canvas = document.createElement("canvas");
                canvas.width = img.width;
                canvas.height = img.height;
                var ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0);
                var dataURL = canvas.toDataURL("image/png");
                return dataURL.replace(/^data:image\/(png|jpg);base64,/, "");
            }

            function getBase64FromImageUrl(URL) {
                var img = new Image();
                img.setAttribute('crossOrigin', 'anonymous');
                img.src = URL;
                img.onload = function() {
                    var canvas = document.createElement("canvas");
                    canvas.width = this.width;
                    canvas.height = this.height;

                    var ctx = canvas.getContext("2d");
                    ctx.drawImage(this, 0, 0);

                    var dataURL = canvas.toDataURL("image/png");

                    alert(dataURL.replace(/^data:image\/(png|jpg);base64,/, ""));

                };
                console.log(img);
                return img;
            }

            async function downloadImage(imageSrc) {
                const image = await fetch(imageSrc)
                const imageBlog = await image.blob()
                const imageURL = URL.createObjectURL(imageBlog)
                console.log(image);
                const link = document.createElement('a')
                link.href = imageURL
                link.download = 'image file name here'
                document.body.appendChild(link)
                link.click()
                document.body.removeChild(link)
            }
            // downloadImage("https://kbvision.vn/wp-content/uploads/2021/05/KX-A7104SD6.png");

            // var base64 = getBase64Image(document.getElementById("imageid"));
            // console.log(base64);
            
            // var ti = getBase64FromImageUrl("https://kbvision.vn/wp-content/uploads/2021/05/KX-A7104SD6.png");
            var downloadedImg;
            var imageBox;
            function startDownload() {
                let imageURL = "https://dahuasecurity.s3.ap-southeast-1.amazonaws.com/uploads%2Fimage%2F20211223%2FHDW1230DT-STW_45Left1_thumb.png";

                downloadedImg = new Image;
                downloadedImg.crossOrigin = "Anonymous";
                downloadedImg.addEventListener("load", imageReceived, false);
                downloadedImg.src = imageURL;
                console.log(downloadedImg);
            }

            function imageReceived() {
                let canvas = document.createElement("canvas");
                let context = canvas.getContext("2d");

                canvas.width = downloadedImg.width;
                canvas.height = downloadedImg.height;

                context.drawImage(downloadedImg, 0, 0);
                // imageBox.appendChild(canvas);

                try {
                    localStorage.setItem("saved-image-example", canvas.toDataURL("image/png"));
                }
                catch(err) {
                    console.log("Error: " + err);
                }
            }
            // startDownload();
            const urlSearchParams = new URLSearchParams(window.location.search);
            const params = Object.fromEntries(urlSearchParams.entries());
            if(!params.id){
                alert("Id product không được trống!");
            }
            var app = new Vue({
                el: "#app",
                data: {
                    description: "",
                    a: "",
                    b: "",                    
                    test_image_source: "",
                    image_source: "",
                    product_model: new CretaProduct(params.id ? {id: params.id} : {})
                },
                method: {
                    onUpdateData: function(){
                        this.description = this.product_model.getDescription();
                        this.$forceUpdate();
                    }
                },
                created(){
                    var that = this;
                    
                    this.product_model.fetch({success: ()=>{
                        this.description = this.product_model.getDescription();
                        this.$forceUpdate();
                    }});
                    // var area2 = new nicEditor({fullPanel : true}).panelInstance('area2',{hasPanel : true});
                }
            })
        </script>
    </body>

</html>